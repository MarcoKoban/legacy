"""
Integration tests for search and genealogy endpoints.

Tests cover:
- GET /api/v1/search/persons
- GET /api/v1/genealogy/ancestors/{person_id}
- GET /api/v1/genealogy/descendants/{person_id}
- GET /api/v1/genealogy/sosa/{sosa_number}
- GET /api/v1/genealogy/tree/{person_id}
- GET /api/v1/search/privacy-info
"""

import pytest
from fastapi.testclient import TestClient
from unittest.mock import Mock, patch

from geneweb.api.main import create_app
from geneweb.api.models.search import PrivacyLevel
from geneweb.db.database import Database
from geneweb.core.person import Person


class TestSearchEndpoints:
    """Test search and genealogy endpoints."""

    @pytest.fixture
    def app(self):
        """Create FastAPI application."""
        return create_app()

    @pytest.fixture
    def client(self, app):
        """Create test client."""
        return TestClient(app)

    @pytest.fixture
    def mock_database(self):
        """Create mock database with test data."""
        db = Mock(spec=Database)
        
        # Create test persons
        deceased = Mock(spec=Person)
        deceased.first_name = "Jean"
        deceased.surname = "Dupont"
        deceased.sex = 1
        deceased.birth = Mock()
        deceased.birth.year = 1920
        deceased.birth.month = 5
        deceased.birth.day = 15
        deceased.birth.place = "Paris"
        deceased.death = Mock()
        deceased.death.year = 1990
        deceased.death.month = 8
        deceased.death.day = 20
        deceased.death.place = "Lyon"
        deceased.occupation = "Engineer"
        deceased.notes = "Important person"
        deceased.get_id.return_value = "person_1"
        deceased.get_father.return_value = None
        deceased.get_mother.return_value = None
        deceased.get_children.return_value = []
        
        living = Mock(spec=Person)
        living.first_name = "Marie"
        living.surname = "Martin"
        living.sex = 2
        living.birth = Mock()
        living.birth.year = 2000
        living.death = None
        living.get_id.return_value = "person_2"
        living.get_father.return_value = None
        living.get_mother.return_value = None
        living.get_children.return_value = []
        
        db.persons = {
            "person_1": deceased,
            "person_2": living
        }
        db.get_person.side_effect = lambda pid: db.persons.get(pid)
        
        return db

    # Tests for /api/v1/search/persons

    def test_search_persons_basic(self, client, mock_database):
        """Test basic person search."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get("/api/v1/search/persons", params={"query": "Dupont"})
            
            assert response.status_code == 200
            data = response.json()
            assert "results" in data
            assert "total" in data
            assert "anonymized_count" in data
            assert isinstance(data["results"], list)

    def test_search_persons_with_filters(self, client, mock_database):
        """Test person search with filters."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            params = {
                "query": "Jean",
                "first_name": "Jean",
                "surname": "Dupont",
                "sex": "M"
            }
            response = client.get("/api/v1/search/persons", params=params)
            
            assert response.status_code == 200
            data = response.json()
            assert "results" in data

    def test_search_persons_pagination(self, client, mock_database):
        """Test person search with pagination."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            params = {
                "query": "",
                "offset": 10,
                "limit": 20
            }
            response = client.get("/api/v1/search/persons", params=params)
            
            assert response.status_code == 200
            data = response.json()
            assert data["offset"] == 10
            assert data["limit"] == 20

    def test_search_persons_invalid_pagination(self, client, mock_database):
        """Test person search with invalid pagination."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            # Negative offset
            response = client.get("/api/v1/search/persons", params={"query": "", "offset": -1})
            assert response.status_code == 422  # Validation error
            
            # Zero limit
            response = client.get("/api/v1/search/persons", params={"query": "", "limit": 0})
            assert response.status_code == 422

    def test_search_persons_with_user_id(self, client, mock_database):
        """Test person search with user ID for authorization."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get(
                "/api/v1/search/persons",
                params={"query": "Martin", "user_id": "user_123"}
            )
            
            assert response.status_code == 200
            data = response.json()
            assert "results" in data

    def test_search_persons_privacy_respected(self, client, mock_database):
        """Test that search respects privacy levels."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get("/api/v1/search/persons", params={"query": ""})
            
            assert response.status_code == 200
            data = response.json()
            
            # Should have some anonymized results
            if data["anonymized_count"] > 0:
                # Check that anonymized persons have [PROTECTED] fields
                for result in data["results"]:
                    if result.get("privacy_level") == "ANONYMIZED":
                        assert result.get("anonymized") is True

    # Tests for /api/v1/genealogy/ancestors/{person_id}

    def test_get_ancestors_basic(self, client, mock_database):
        """Test getting ancestors of a person."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get("/api/v1/genealogy/ancestors/person_1")
            
            assert response.status_code == 200
            data = response.json()
            assert "root_person_id" in data
            assert "ancestors" in data
            assert "total_ancestors" in data
            assert "max_generation" in data
            assert data["root_person_id"] == "person_1"

    def test_get_ancestors_with_max_generations(self, client, mock_database):
        """Test getting ancestors with max generations parameter."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get(
                "/api/v1/genealogy/ancestors/person_1",
                params={"max_generations": 3}
            )
            
            assert response.status_code == 200
            data = response.json()
            assert data["max_generation"] <= 3

    def test_get_ancestors_invalid_max_generations(self, client, mock_database):
        """Test getting ancestors with invalid max generations."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            # Too high
            response = client.get(
                "/api/v1/genealogy/ancestors/person_1",
                params={"max_generations": 15}
            )
            assert response.status_code == 422
            
            # Negative
            response = client.get(
                "/api/v1/genealogy/ancestors/person_1",
                params={"max_generations": -1}
            )
            assert response.status_code == 422

    def test_get_ancestors_person_not_found(self, client, mock_database):
        """Test getting ancestors of non-existent person."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get("/api/v1/genealogy/ancestors/nonexistent")
            
            # Should return 404 or empty result
            if response.status_code == 200:
                data = response.json()
                assert data["total_ancestors"] == 0
            else:
                assert response.status_code == 404

    def test_get_ancestors_with_user_id(self, client, mock_database):
        """Test getting ancestors with user authorization."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get(
                "/api/v1/genealogy/ancestors/person_1",
                params={"user_id": "user_123"}
            )
            
            assert response.status_code == 200

    # Tests for /api/v1/genealogy/descendants/{person_id}

    def test_get_descendants_basic(self, client, mock_database):
        """Test getting descendants of a person."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get("/api/v1/genealogy/descendants/person_1")
            
            assert response.status_code == 200
            data = response.json()
            assert "root_person_id" in data
            assert "descendants" in data
            assert "total_descendants" in data
            assert data["root_person_id"] == "person_1"

    def test_get_descendants_with_max_generations(self, client, mock_database):
        """Test getting descendants with max generations."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get(
                "/api/v1/genealogy/descendants/person_1",
                params={"max_generations": 4}
            )
            
            assert response.status_code == 200
            data = response.json()
            assert data["max_generation"] <= 4

    def test_get_descendants_living_protected(self, client, mock_database):
        """Test that living descendants are protected."""
        # Add living child to deceased person
        child = Mock(spec=Person)
        child.first_name = "Sophie"
        child.surname = "Dupont"
        child.sex = 2
        child.birth = Mock()
        child.birth.year = 2010
        child.death = None
        child.get_id.return_value = "child_1"
        child.get_children.return_value = []
        
        mock_database.persons["person_1"].get_children.return_value = [child]
        mock_database.persons["child_1"] = child
        
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get("/api/v1/genealogy/descendants/person_1")
            
            assert response.status_code == 200
            data = response.json()
            
            # Should have anonymized count
            if data["anonymized_count"] > 0:
                assert data["anonymized_count"] >= 1

    # Tests for /api/v1/genealogy/sosa/{sosa_number}

    def test_get_person_by_sosa_root(self, client, mock_database):
        """Test getting person by Sosa number 1 (root)."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get(
                "/api/v1/genealogy/sosa/1",
                params={"root_person_id": "person_1"}
            )
            
            assert response.status_code == 200
            data = response.json()
            assert data["sosa_number"] == 1
            assert data["person_id"] == "person_1"

    def test_get_person_by_sosa_father(self, client, mock_database):
        """Test getting father by Sosa number 2."""
        # Add father
        father = Mock(spec=Person)
        father.first_name = "Paul"
        father.surname = "Dupont"
        father.sex = 1
        father.birth = Mock()
        father.birth.year = 1890
        father.death = Mock()
        father.death.year = 1960
        father.get_id.return_value = "father_1"
        father.get_father.return_value = None
        father.get_mother.return_value = None
        
        mock_database.persons["person_1"].get_father.return_value = father
        mock_database.persons["father_1"] = father
        
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get(
                "/api/v1/genealogy/sosa/2",
                params={"root_person_id": "person_1"}
            )
            
            if response.status_code == 200:
                data = response.json()
                assert data["sosa_number"] == 2

    def test_get_person_by_sosa_invalid_number(self, client, mock_database):
        """Test getting person with invalid Sosa number."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            # Zero
            response = client.get(
                "/api/v1/genealogy/sosa/0",
                params={"root_person_id": "person_1"}
            )
            assert response.status_code in [404, 422]
            
            # Negative (path parameter won't match)
            # This will result in 404 from routing

    def test_get_person_by_sosa_not_found(self, client, mock_database):
        """Test getting non-existent Sosa ancestor."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            # Sosa 4 = paternal grandfather, but no father exists
            response = client.get(
                "/api/v1/genealogy/sosa/4",
                params={"root_person_id": "person_1"}
            )
            
            assert response.status_code == 404

    def test_get_person_by_sosa_missing_root(self, client, mock_database):
        """Test Sosa search without root person ID."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get("/api/v1/genealogy/sosa/1")
            
            # Missing required parameter
            assert response.status_code == 422

    # Tests for /api/v1/genealogy/tree/{person_id}

    def test_get_genealogy_tree_full(self, client, mock_database):
        """Test getting full genealogy tree."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get(
                "/api/v1/genealogy/tree/person_1",
                params={"tree_type": "full"}
            )
            
            assert response.status_code == 200
            data = response.json()
            assert "ancestors" in data
            assert "descendants" in data
            assert "root_person_id" in data

    def test_get_genealogy_tree_ancestors_only(self, client, mock_database):
        """Test getting ancestors-only tree."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get(
                "/api/v1/genealogy/tree/person_1",
                params={"tree_type": "ancestors"}
            )
            
            assert response.status_code == 200
            data = response.json()
            assert "ancestors" in data
            # Descendants should be empty or not included
            if "descendants" in data:
                assert len(data["descendants"]) == 0

    def test_get_genealogy_tree_descendants_only(self, client, mock_database):
        """Test getting descendants-only tree."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get(
                "/api/v1/genealogy/tree/person_1",
                params={"tree_type": "descendants"}
            )
            
            assert response.status_code == 200
            data = response.json()
            assert "descendants" in data
            # Ancestors should be empty or not included
            if "ancestors" in data:
                assert len(data["ancestors"]) == 0

    def test_get_genealogy_tree_invalid_type(self, client, mock_database):
        """Test getting tree with invalid type."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get(
                "/api/v1/genealogy/tree/person_1",
                params={"tree_type": "invalid"}
            )
            
            # Should return validation error
            assert response.status_code == 422

    def test_get_genealogy_tree_with_generations(self, client, mock_database):
        """Test getting tree with max generations limit."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            response = client.get(
                "/api/v1/genealogy/tree/person_1",
                params={
                    "tree_type": "full",
                    "max_generations": 3
                }
            )
            
            assert response.status_code == 200
            data = response.json()
            assert data["max_generation"] <= 3

    # Tests for /api/v1/search/privacy-info

    def test_get_privacy_info(self, client):
        """Test getting privacy information."""
        response = client.get("/api/v1/search/privacy-info")
        
        assert response.status_code == 200
        data = response.json()
        assert "privacy_levels" in data
        assert "living_person_criteria" in data
        assert "rgpd_compliance" in data
        
        # Check privacy levels structure
        levels = data["privacy_levels"]
        assert "PUBLIC" in levels
        assert "RESTRICTED" in levels
        assert "ANONYMIZED" in levels

    def test_privacy_info_no_auth_required(self, client):
        """Test that privacy info doesn't require authentication."""
        # Should work without any parameters
        response = client.get("/api/v1/search/privacy-info")
        assert response.status_code == 200

    # Tests for error handling

    def test_search_database_error(self, client):
        """Test search endpoint handles database errors."""
        failing_db = Mock(spec=Database)
        failing_db.persons = {}
        failing_db.get_person.side_effect = Exception("Database error")
        
        with patch('geneweb.api.dependencies.get_database', return_value=failing_db):
            response = client.get("/api/v1/search/persons", params={"query": "test"})
            
            # Should return 500 or handle gracefully
            assert response.status_code in [200, 500]

    def test_ancestors_database_error(self, client):
        """Test ancestors endpoint handles database errors."""
        failing_db = Mock(spec=Database)
        failing_db.get_person.side_effect = Exception("Database error")
        
        with patch('geneweb.api.dependencies.get_database', return_value=failing_db):
            response = client.get("/api/v1/genealogy/ancestors/person_1")
            
            assert response.status_code in [404, 500]

    def test_invalid_person_id_format(self, client, mock_database):
        """Test endpoints with various person ID formats."""
        with patch('geneweb.api.dependencies.get_database', return_value=mock_database):
            # Empty string
            response = client.get("/api/v1/genealogy/ancestors/")
            assert response.status_code == 404  # Route not found
            
            # Special characters
            response = client.get("/api/v1/genealogy/ancestors/person%20with%20spaces")
            # Should handle URL encoding
            assert response.status_code in [200, 404, 500]

    # Tests for CORS and headers

    def test_cors_headers_present(self, client):
        """Test that CORS headers are present in responses."""
        response = client.get("/api/v1/search/privacy-info")
        
        # FastAPI TestClient doesn't always include CORS headers in test mode
        # But we can verify the endpoint works
        assert response.status_code == 200

    def test_options_request(self, client):
        """Test OPTIONS request for CORS preflight."""
        response = client.options("/api/v1/search/persons")
        
        # Should handle OPTIONS request
        assert response.status_code in [200, 405]


class TestSearchEndpointsIntegration:
    """Integration tests with more complex scenarios."""

    @pytest.fixture
    def complex_database(self):
        """Create a database with complex family structure."""
        db = Mock(spec=Database)
        
        # Create multi-generation family
        grandpa = Mock(spec=Person)
        grandpa.first_name = "Jacques"
        grandpa.surname = "Dupont"
        grandpa.sex = 1
        grandpa.birth = Mock()
        grandpa.birth.year = 1890
        grandpa.death = Mock()
        grandpa.death.year = 1970
        grandpa.get_id.return_value = "gp_1"
        grandpa.get_father.return_value = None
        grandpa.get_mother.return_value = None
        
        father = Mock(spec=Person)
        father.first_name = "Paul"
        father.surname = "Dupont"
        father.sex = 1
        father.birth = Mock()
        father.birth.year = 1920
        father.death = Mock()
        father.death.year = 1990
        father.get_id.return_value = "father_1"
        father.get_father.return_value = grandpa
        father.get_mother.return_value = None
        
        son = Mock(spec=Person)
        son.first_name = "Jean"
        son.surname = "Dupont"
        son.sex = 1
        son.birth = Mock()
        son.birth.year = 1950
        son.death = Mock()
        son.death.year = 2020
        son.get_id.return_value = "son_1"
        son.get_father.return_value = father
        son.get_mother.return_value = None
        
        grandson = Mock(spec=Person)
        grandson.first_name = "Marc"
        grandson.surname = "Dupont"
        grandson.sex = 1
        grandson.birth = Mock()
        grandson.birth.year = 2000
        grandson.death = None  # Living
        grandson.get_id.return_value = "grandson_1"
        grandson.get_father.return_value = son
        grandson.get_mother.return_value = None
        grandson.get_children.return_value = []
        
        # Setup children relationships
        grandpa.get_children.return_value = [father]
        father.get_children.return_value = [son]
        son.get_children.return_value = [grandson]
        
        db.persons = {
            "gp_1": grandpa,
            "father_1": father,
            "son_1": son,
            "grandson_1": grandson
        }
        db.get_person.side_effect = lambda pid: db.persons.get(pid)
        
        return db

    def test_multi_generation_ancestors(self, complex_database):
        """Test retrieving multiple generations of ancestors."""
        from fastapi.testclient import TestClient
        app = create_app()
        client = TestClient(app)
        
        with patch('geneweb.api.dependencies.get_database', return_value=complex_database):
            response = client.get(
                "/api/v1/genealogy/ancestors/grandson_1",
                params={"max_generations": 5}
            )
            
            assert response.status_code == 200
            data = response.json()
            assert data["total_ancestors"] >= 3  # father, grandfather, great-grandfather

    def test_multi_generation_descendants(self, complex_database):
        """Test retrieving multiple generations of descendants."""
        from fastapi.testclient import TestClient
        app = create_app()
        client = TestClient(app)
        
        with patch('geneweb.api.dependencies.get_database', return_value=complex_database):
            response = client.get(
                "/api/v1/genealogy/descendants/gp_1",
                params={"max_generations": 5}
            )
            
            assert response.status_code == 200
            data = response.json()
            # Should include descendants, with living ones anonymized
            assert "descendants" in data
            if data["anonymized_count"] > 0:
                # Living grandson should be anonymized
                assert data["anonymized_count"] >= 1

    def test_complete_family_tree(self, complex_database):
        """Test retrieving complete family tree."""
        from fastapi.testclient import TestClient
        app = create_app()
        client = TestClient(app)
        
        with patch('geneweb.api.dependencies.get_database', return_value=complex_database):
            response = client.get(
                "/api/v1/genealogy/tree/son_1",
                params={"tree_type": "full", "max_generations": 3}
            )
            
            assert response.status_code == 200
            data = response.json()
            # Should have both ancestors and descendants
            assert len(data["ancestors"]) > 0 or len(data["descendants"]) > 0
