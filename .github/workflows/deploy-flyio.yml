name: 🚀 Deploy to Fly.io

on:
  push:
    branches: [ main ]
    paths:
      - 'geneweb_python/**'
      - '.github/workflows/deploy-flyio.yml'
  pull_request:
    branches:
      - main
    types: [closed]
  workflow_dispatch:


jobs:
  # Job de tests avant déploiement
  test:
    name: 🧪 Run Tests
    runs-on: [self-hosted]
    defaults:
      run:
        working-directory: ./geneweb_python

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: 🧪 Run pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=term-missing
      env:
        TESTING: "1"

  # Job de déploiement sur Fly.io
  deploy:
    name: 🚀 Deploy to Fly.io
    runs-on: [self-hosted]
    needs: test  # Déploie seulement si les tests passent
    # Déploiement uniquement sur la branche main (production)
    # Pour dev, on peut créer une app Fly.io séparée (staging)
    if: github.ref == 'refs/heads/main'

    defaults:
      run:
        working-directory: ./geneweb_python

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🎯 Setup Fly.io CLI
      uses: superfly/flyctl-actions/setup-flyctl@master

    - name: 🚀 Deploy to Fly.io
      run: flyctl deploy --remote-only
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    - name: ✅ Verify Deployment
      run: |
        echo "🎉 Deployment completed!"
        echo "🔗 Application URL: https://geneweb-api.fly.dev"
        echo "🏥 Health check: https://geneweb-api.fly.dev/health/"
        
        # Attendre que l'application démarre
        sleep 10
        
        # Vérifier le health check
        curl -f https://geneweb-api.fly.dev/health/ || exit 1
        echo "✅ Health check passed!"

  # Job optionnel pour déployer sur un environnement de staging (dev)
  deploy-staging:
    name: 🧪 Deploy to Staging (dev)
    runs-on: [self-hosted]
    needs: test
    if: github.ref == 'refs/heads/dev'

    defaults:
      run:
        working-directory: ./geneweb_python

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🎯 Setup Fly.io CLI
      uses: superfly/flyctl-actions/setup-flyctl@master

    - name: 🧪 Deploy to Staging
      run: |
        # Déployer sur une app staging séparée (à créer)
        # flyctl deploy --remote-only --app geneweb-api-staging
        echo "⚠️ Staging deployment not configured yet"
        echo "To enable: Create 'geneweb-api-staging' app on Fly.io"
        echo "and uncomment the flyctl deploy command above"
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  # Notification de déploiement (optionnel)
  notify:
    name: 📢 Notify Deployment
    runs-on: [self-hosted]
    needs: [deploy, deploy-staging]
    if: always()

    steps:
    - name: 📢 Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Production deployment successful!"
        elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "✅ Staging deployment successful!"
        else
          echo "❌ Deployment failed"
          exit 1
        fi
